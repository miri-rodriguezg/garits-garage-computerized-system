/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.PdfWriter;
import demrar.DBConnectivity;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.table.DefaultTableModel;
import javax.swing.JSpinner;
import javax.swing.SwingUtilities;

/**
 *
 * @author acwf580
 */
public class PerformanceReport extends javax.swing.JPanel {

//    private static File jpgOriginal = new File("PerformanceReport.jpg");
//    private File jpgResized = new File("ActualPerformanceReport.jpg");
    private static Document performanceReportDoc = new Document(PageSize.A4.rotate());

    /**
     * Creates new form PerformanceReportMonthly
     */
    public PerformanceReport() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportTypeButtonGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        generateReportButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        performanceReportTable = new javax.swing.JTable();
        perMonthButton = new javax.swing.JRadioButton();
        overallButton = new javax.swing.JRadioButton();
        perJobTypeButton = new javax.swing.JRadioButton();
        perCustomerTypeButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        perJobComboBox = new javax.swing.JComboBox<>();
        customerTypeComboBox = new javax.swing.JComboBox<>();
        printReportButton = new javax.swing.JButton();
        yearSpinner = new javax.swing.JSpinner();
        monthSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        currentDateText = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        jLabel1.setText("GARITS");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo.jpg"))); // NOI18N

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        generateReportButton.setText("Generate report");
        generateReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportButtonActionPerformed(evt);
            }
        });

        performanceReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {"", null, null, null, null, null, null}
            },
            new String [] {
                "No. of vehicles", "CustomerId", "CustomerType", "VehicleRegNo", "VehicleMake", "Job", "Mechanic"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(performanceReportTable);

        perMonthButton.setBackground(new java.awt.Color(255, 255, 255));
        reportTypeButtonGroup.add(perMonthButton);
        perMonthButton.setSelected(true);
        perMonthButton.setText("Monthly from:");
        perMonthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perMonthButtonActionPerformed(evt);
            }
        });

        overallButton.setBackground(new java.awt.Color(255, 255, 255));
        reportTypeButtonGroup.add(overallButton);
        overallButton.setText("Overall");

        perJobTypeButton.setBackground(new java.awt.Color(255, 255, 255));
        reportTypeButtonGroup.add(perJobTypeButton);
        perJobTypeButton.setText("Per job type:");
        perJobTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perJobTypeButtonActionPerformed(evt);
            }
        });

        perCustomerTypeButton.setBackground(new java.awt.Color(255, 255, 255));
        reportTypeButtonGroup.add(perCustomerTypeButton);
        perCustomerTypeButton.setText("Per type of customer:");
        perCustomerTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perCustomerTypeButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setText("No. of Vehicles booked in");

        perJobComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Annual Service", "MoT", "Repair" }));
        perJobComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perJobComboBoxActionPerformed(evt);
            }
        });

        customerTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Account Holder", "Casual" }));

        printReportButton.setText("Print");
        printReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printReportButtonActionPerformed(evt);
            }
        });

        yearSpinner.setModel(new javax.swing.SpinnerNumberModel(2019, 2010, 9999, 1));
        JSpinner.NumberEditor editor = new javax.swing.JSpinner.NumberEditor(yearSpinner, "#");
        yearSpinner.setEditor(editor);
        editor.getTextField().setHorizontalAlignment(javax.swing.JTextField.CENTER);

        monthSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"}));

        jLabel6.setText("Report Date:");

        currentDateText.setText(LocalDate.now().toString());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(129, 129, 129)
                .addComponent(generateReportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printReportButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(perMonthButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(yearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(overallButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(perJobTypeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(perJobComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(perCustomerTypeButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(customerTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(jScrollPane1))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(perMonthButton)
                    .addComponent(monthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(overallButton)
                    .addComponent(perJobTypeButton)
                    .addComponent(perJobComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perCustomerTypeButton)
                    .addComponent(customerTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(printReportButton)
                            .addComponent(generateReportButton))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(currentDateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))))
        );
    }// </editor-fold>//GEN-END:initComponents

    //The next three methods allow to print the report
    public static BufferedImage getScreenShot(Component component) {
        BufferedImage image = new BufferedImage(770, 500, BufferedImage.TYPE_INT_RGB);
        component.paint(image.getGraphics());

        return image;
    }

    public static void SaveScreenShot(Component component, String filename) throws Exception {

        BufferedImage img = getScreenShot(component);
        ImageIO.write(img, "jpg", new File(filename));
//        input = new File(filename);
        //output = input;
    }

    public static void printPerformanceReport() throws BadElementException, IOException {
        try {
            PdfWriter writer = PdfWriter.getInstance(performanceReportDoc, new FileOutputStream("PerformanceReport.pdf"));
            performanceReportDoc.open();

            Image performanceReportI = Image.getInstance("PerformanceReport.jpg");

            performanceReportDoc.add(performanceReportI);

            performanceReportDoc.close();
            writer.close();
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    private void perMonthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perMonthButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_perMonthButtonActionPerformed

    private void perCustomerTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perCustomerTypeButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_perCustomerTypeButtonActionPerformed

    private void perJobTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perJobTypeButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_perJobTypeButtonActionPerformed

    private void perJobComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perJobComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_perJobComboBoxActionPerformed

    private void generateReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportButtonActionPerformed
 
        String yearText = yearSpinner.getValue().toString();
        String monthText = monthSpinner.getValue().toString();
        int year = Integer.parseInt(yearText);
        int month = Integer.parseInt(monthText);
        Connection connection = DBConnectivity.getConnection();
        generatePerformanceReport(connection, year, month);
    }//GEN-LAST:event_generateReportButtonActionPerformed

    private void printReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printReportButtonActionPerformed
        // TODO add your handling code here:
        getScreenShot(this);
        try {
            SaveScreenShot(this, "PerformanceReport.jpg");
        } catch (Exception ex) {
            Logger.getLogger(PerformanceReport.class.getName()).log(Level.SEVERE, null, ex);
        }
        //rotate(input, output, ROTATE_LEFT);
        //resize(jpgOriginal, jpgResized, 1200, 600, "jpg");

        try {
            printPerformanceReport();
        } catch (BadElementException ex) {
            Logger.getLogger(PerformanceReport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PerformanceReport.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_printReportButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Homepage homepage = (Homepage) SwingUtilities.getWindowAncestor(this);
        homepage.setContentPane(new GenerateReportFranchisee());

        homepage.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void generatePerformanceReport(Connection connection, int year, int month) {
        LocalDate selectedDate = LocalDate.of(year, month, 1);
        String daysInLastMonth = String.valueOf(selectedDate.lengthOfMonth());
        String targetDateBeginning = (selectedDate.toString()).substring(0, 8); //This might seem redundant but I need this so I can attach the last day of month one line below
        String targetDateEnding = targetDateBeginning + daysInLastMonth;
        targetDateBeginning = targetDateBeginning + "01";
   
//Allows to perform report according to a selected date        
        String perMonthSQL = "SELECT c.customerId,c.accountType,v.regNo,v.make,j.jobType,j.mechanicId "
                + "FROM Customer AS c "
                + "INNER JOIN Vehicle AS v ON c.customerId = v.customerId "
                + "INNER JOIN Job AS j ON v.regNo = j.VehicleregNo "
                + "WHERE v.dateVisited >= '" + targetDateBeginning + "' AND v.dateVisited <= '" + targetDateEnding + "' "
                + "ORDER BY c.customerId";
        
//Allows to perform report according to overall garage performance         
        String overallSQL = "SELECT c.customerId,c.accountType,v.regNo,v.make,j.jobType,j.mechanicId "
                + "FROM Customer AS c "
                + "INNER JOIN Vehicle AS v ON c.customerId = v.customerId "
                + "INNER JOIN Job AS j ON v.regNo = j.VehicleregNo "
                + "ORDER BY c.customerId";
        
//Allows to perform report for each year       
        String annualServiceSQL = "SELECT c.customerId,c.accountType,v.regNo,v.make,j.jobType,j.mechanicId "
                + "FROM Customer AS c "
                + "INNER JOIN Vehicle AS v ON c.customerId = v.customerId "
                + "INNER JOIN Job AS j ON v.regNo = j.VehicleregNo "
                + "WHERE j.jobType = 'Annual' "
                + "ORDER BY c.customerId";
        
//Allows to perform report according to MoT    
        String motSQL = "SELECT c.customerId,c.accountType,v.regNo,v.make,j.jobType,j.mechanicId "
                + "FROM Customer AS c "
                + "INNER JOIN Vehicle AS v ON c.customerId = v.customerId "
                + "INNER JOIN Job AS j ON v.regNo = j.VehicleregNo "
                + "WHERE j.jobType = 'MoT' "
                + "ORDER BY c.customerId";
        
//Allows to perform report according regular repairs         
        String repairSQL = "SELECT c.customerId,c.accountType,v.regNo,v.make,j.jobType,j.mechanicId "
                + "FROM Customer AS c "
                + "INNER JOIN Vehicle AS v ON c.customerId = v.customerId "
                + "INNER JOIN Job AS j ON v.regNo = j.VehicleregNo "
                + "WHERE j.jobType = 'Repair' "
                + "ORDER BY c.customerId";
        
//Allows to perform report according account holders        
        String accountHolderSQL = "SELECT c.customerId,c.accountType,v.regNo,v.make,j.jobType,j.mechanicId "
                + "FROM Customer AS c "
                + "INNER JOIN Vehicle AS v ON c.customerId = v.customerId "
                + "INNER JOIN Job AS j ON v.regNo = j.VehicleregNo "
                + "WHERE c.accountType = 'Account Holder' "
                + "ORDER BY c.customerId";
        
//Allows to perform report according to non-account holders   
        String casualSQL = "SELECT c.customerId,c.accountType,v.regNo,v.make,j.jobType,j.mechanicId "
                + "FROM Customer AS c "
                + "INNER JOIN Vehicle AS v ON c.customerId = v.customerId "
                + "INNER JOIN Job AS j ON v.regNo = j.VehicleregNo "
                + "WHERE c.accountType = 'Casual' "
                + "ORDER BY c.customerId";
        String selectedSQL = null;
        if (perMonthButton.isSelected()) {
            selectedSQL = perMonthSQL;
        } else if (overallButton.isSelected()) {
            selectedSQL = overallSQL;
        } else if (perJobTypeButton.isSelected() && (perJobComboBox.getSelectedIndex() == 0)) {
            selectedSQL = annualServiceSQL;
        } else if (perJobTypeButton.isSelected() && (perJobComboBox.getSelectedIndex() == 1)) {
            selectedSQL = motSQL;
        } else if (perJobTypeButton.isSelected() && (perJobComboBox.getSelectedIndex() == 2)) {
            selectedSQL = repairSQL;
        } else if (perCustomerTypeButton.isSelected() && (customerTypeComboBox.getSelectedIndex() == 0)) {
            selectedSQL = accountHolderSQL;
        } else if (perCustomerTypeButton.isSelected() && (customerTypeComboBox.getSelectedIndex() == 1)) {
            selectedSQL = casualSQL;
        } else {
            System.out.println("Error: no statement was selected");
        }
        
//create the table and set default values to null        
        try {
            Statement statement = connection.createStatement();
            ResultSet rs = statement.executeQuery(selectedSQL);
            int row = 0;
            performanceReportTable.setModel(new DefaultTableModel(
                    new Object[][]{
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null}
                    },
                    new String[]{
                        "No. of vehicles", "CustomerId", "CustomerType", "VehicleRegNo", "VehicleMake", "Job", "Mechanic"
                    }
            ));
            
//Enter values to the table            
            DefaultTableModel model = (DefaultTableModel) performanceReportTable.getModel();
            int maxRows = model.getRowCount() - 1;
            int numberOfSameIDs = 0;
            int previousCustomerID = -1;
            while (rs.next()) {
                if (row > maxRows) {
                    model.addRow(new Object[]{});
                    maxRows++;
                }
                int currentID = rs.getInt("customerId");
                if (currentID == previousCustomerID) {
                    numberOfSameIDs++;
                } else {
                    if (previousCustomerID != -1) {
                        performanceReportTable.setValueAt(numberOfSameIDs, row - numberOfSameIDs, 0);
                    }
                    previousCustomerID = currentID;
                    numberOfSameIDs = 1;
                }
                performanceReportTable.setValueAt(currentID, row, 1);
                performanceReportTable.setValueAt(rs.getString("accountType"), row, 2);
                performanceReportTable.setValueAt(rs.getString("regNo"), row, 3);
                performanceReportTable.setValueAt(rs.getString("make"), row, 4);
                performanceReportTable.setValueAt(rs.getString("jobType"), row, 5);
                performanceReportTable.setValueAt(rs.getString("mechanicId"), row, 6);
                row++;
            }
            performanceReportTable.setValueAt(numberOfSameIDs, row - numberOfSameIDs, 0);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentDateText;
    private javax.swing.JComboBox<String> customerTypeComboBox;
    private javax.swing.JButton generateReportButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner monthSpinner;
    private javax.swing.JRadioButton overallButton;
    private javax.swing.JRadioButton perCustomerTypeButton;
    private javax.swing.JComboBox<String> perJobComboBox;
    private javax.swing.JRadioButton perJobTypeButton;
    private javax.swing.JRadioButton perMonthButton;
    private javax.swing.JTable performanceReportTable;
    private javax.swing.JButton printReportButton;
    private javax.swing.ButtonGroup reportTypeButtonGroup;
    private javax.swing.JSpinner yearSpinner;
    // End of variables declaration//GEN-END:variables
}
