/*                                         
 * To change this license header, choose License Headers in Project Properties.                                        
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.PdfWriter;
import demrar.DBConnectivity;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author acwf580
 */
public class ProduceInvoiceReceptionist extends javax.swing.JPanel {

    /**
     *
     */
    public static Document invoiceDoc = new Document();
    Connection conn = null;
    Statement stm = DBConnectivity.getStatement();
    ResultSet resultSet = null;
    ProduceInvoiceOrReminderStep1Receptionist PIOR = new ProduceInvoiceOrReminderStep1Receptionist();

    /**
     *
     */
    public static String model = "";

    /**
     *
     */
    public LocalDate presentDate;

    /**
     *
     */
    public static File jpgOriginal = new File("Invoice.jpg");

    /**
     * Creates new form ProduceInvoiceStep2
     * @param accessClass
     */
    public ProduceInvoiceReceptionist(String accessClass) {
        initComponents();
        if (accessClass.equals("PIOR")) {
            conn = DBConnectivity.getConnection();
            generateInvoiceTable(conn, PIOR.getRegNo());
            DBConnectivity.disconnect(conn);
            setFields();
        }
    }

    /**
     *
     * @param jobNo
     */
    public ProduceInvoiceReceptionist(int jobNo) {
        initComponents();
        String jobNoString = String.valueOf(jobNo);
        conn = DBConnectivity.getConnection();
        generatePartsSoldInvoice(conn, jobNoString);
        DBConnectivity.disconnect(conn);
    }

//Get screenshot of GUI and turn into PDF to print   

    /**
     *
     * @param component
     * @return
     */
    public static BufferedImage getScreenShot(Component component) {
        BufferedImage image = new BufferedImage(1000, 900, BufferedImage.TYPE_INT_RGB);
        component.paint(image.getGraphics());

        return image;
    }

    /**
     *
     * @param component
     * @param filename
     * @throws Exception
     */
    public static void SaveScreenShot(Component component, String filename) throws Exception {

        BufferedImage img = getScreenShot(component);
        ImageIO.write(img, "jpg", new File(filename));
    }

    /**
     *
     * @return
     */
    public JTable getTable() {
        ///invoiceTable.getValueAt(int row, int column);
        return invoiceTable;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        garitsText = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        invoiceNoNonField = new javax.swing.JLabel();
        invoiceId = new javax.swing.JLabel();
        vehicleRegNonField = new javax.swing.JLabel();
        makeNonField = new javax.swing.JLabel();
        modelNonField = new javax.swing.JLabel();
        decriptionNonField = new javax.swing.JLabel();
        workDoneField = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoiceTable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        date = new javax.swing.JLabel();
        makeField = new javax.swing.JLabel();
        regNo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        modelField = new javax.swing.JLabel();
        nameField = new javax.swing.JLabel();
        addressField = new javax.swing.JLabel();
        postCodeField = new javax.swing.JLabel();
        dearField = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        labourField = new javax.swing.JLabel();
        labourPrice = new javax.swing.JLabel();
        jobDuration = new javax.swing.JLabel();
        labourTotal = new javax.swing.JLabel();
        totalField = new javax.swing.JLabel();
        vatField = new javax.swing.JLabel();
        grandTotalField = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1000, 1000));

        garitsText.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        garitsText.setText("GARITS");

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo.jpg"))); // NOI18N

        invoiceNoNonField.setText("INVOICE NO.:");

        vehicleRegNonField.setText("Vehicle Registration No.:");

        makeNonField.setText("Make:");

        modelNonField.setText("Model:");

        decriptionNonField.setText("Description of work:");

        workDoneField.setText(null);

        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item", "Part No.", "Unit Cost", "Qty.", "Cost (Â£)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(invoiceTable);

        jLabel12.setText("Thank you for your valued custom. We look forward to recieving your payment in due course.");

        jLabel13.setText("Yours sincerely,");

        jLabel14.setText("G. Lancaster");

        jButton1.setText("Done/Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Quick Fitters");

        jLabel2.setText("19 High St.,");

        jLabel3.setText("Ashford,");

        jLabel5.setText("Kent CT16 8YY");

        date.setText(null);

        makeField.setText(null);

        regNo.setText(null);
        regNo.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                regNoComponentShown(evt);
            }
        });

        modelField.setText(null);

        nameField.setText("Mr/Ms ");

        postCodeField.setText(null);

        dearField.setText("Dear Mr/Ms ");

        jLabel6.setText("Labour");

        jLabel7.setText("Grand Total");

        jLabel8.setText("Total");

        jLabel9.setText("VAT");

        labourPrice.setText(null);

        jobDuration.setText(null);

        labourTotal.setText(null);

        totalField.setText("totalField");

        vatField.setText("vatField");

        grandTotalField.setText("grandTotalField");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(postCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(modelNonField)
                                    .addComponent(makeNonField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(makeField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(invoiceNoNonField)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(vehicleRegNonField)
                                        .addGap(18, 18, 18)
                                        .addComponent(regNo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(invoiceId, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(81, 81, 81))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addressField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(126, 126, 126))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(garitsText)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(logo))
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(decriptionNonField)
                            .addComponent(workDoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(2, 2, 2))
                            .addComponent(date, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(456, 456, 456)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel14)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(labourField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(dearField, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(203, 203, 203)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(labourPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(jobDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(grandTotalField)
                            .addComponent(totalField)
                            .addComponent(labourTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vatField))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logo)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(garitsText)
                                .addGap(18, 18, 18)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3)
                                .addGap(9, 9, 9)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(date))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(postCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dearField, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(131, 131, 131)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(invoiceNoNonField)
                                    .addComponent(invoiceId, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(vehicleRegNonField)
                                    .addComponent(regNo, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(modelNonField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(makeNonField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(makeField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(decriptionNonField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(workDoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(labourPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jobDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labourTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(labourField, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(totalField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(vatField))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(grandTotalField))
                .addGap(13, 13, 13)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            getScreenShot(this);

            SaveScreenShot(this, "Invoice.jpg");
            printInvoice();
            getDate();

        } catch (Exception ex) {
            Logger.getLogger(ProduceInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void regNoComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_regNoComponentShown
        // TODO add your handling code here:

    }//GEN-LAST:event_regNoComponentShown

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//Back button
        Homepage homepage = (Homepage) SwingUtilities.getWindowAncestor(this);
        homepage.setContentPane(new ProduceInvoiceOrReminderStep1Receptionist());
        homepage.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

//Allow to access details to send to a particular customer    
    private void setFields() {
        nameField.setText(PIOR.getName());
        addressField.setText(PIOR.getAddress());
        postCodeField.setText(PIOR.getPostCode());
        dearField.setText("Dear " + PIOR.getName());
    }

//This method will perform calculations involving the parts used    

    /**
     *
     * @param connection
     * @param targetJobNo
     * @return
     */
    public BigDecimal generatePartsSoldInvoice(Connection connection, String targetJobNo) {
//Setting defaults to zero        
        BigDecimal grandTotal = BigDecimal.valueOf(0);
        LocalDate localDate = LocalDate.now();
        date.setText(localDate.toString());
        int fixedDiscount = 0;
        int motDiscount = 0;
        int repairDiscount = 0;
        int annualDiscount = 0;
        int customerId = 0;
        boolean newInvoice = false;
        String flexibleDiscountFirst = "";
        String flexibleDiscountSecond = "";
        String flexibleDiscountThird = "";
        String setPrice = "";

        /* If the garage has a set price for a specific job, independently of the labour hours of parts used (hence no stock mark up), 
the invoice will get this set price amount assuming VAT is included*/
        String invoiceSQL = "SELECT j.setPrice, j.customerId, pu.partNo, pu.quantity, sl.partName, sl.price "
                + "FROM Job AS j "
                + "INNER JOIN PartsUsed AS pu ON j.jobNo = pu.jobNo "
                + "INNER JOIN StockLedger AS sl ON pu.partNo = sl.partNo "
                + "WHERE j.jobNo = '" + targetJobNo + "' ";
        String checkSQL = "SELECT invoiceId FROM Invoice WHERE jobNo = '" + targetJobNo + "'";
        try {
            Statement statement = connection.createStatement();
            Statement checkStatement = connection.createStatement(); //Checks if invoice for vehicle already exists
            ResultSet rs = statement.executeQuery(invoiceSQL);
            ResultSet checkRS = checkStatement.executeQuery(checkSQL);
            customerId = rs.getInt("customerId");

//Apply possible discounts by account holders through the Disocunt table where they were initially recorded if not null.            
            String discountSQL = "SELECT * "
                    + "FROM Discount "
                    + "WHERE customerId = '" + customerId + "' ";

//Accessing customer details to assign invoice to            
            String customerSQL = "SELECT Firstname,Lastname,address,postcode "
                    + "FROM Customer "
                    + "WHERE customerId = '" + customerId + "' ";
            Statement discountStatement = connection.createStatement();
            Statement customerStatement = connection.createStatement();
            ResultSet customerRS = customerStatement.executeQuery(customerSQL);
            ResultSet discountRS = discountStatement.executeQuery(discountSQL);
            while (customerRS.next()) {
                String currentName = customerRS.getString("Firstname");
                try {
                    String lastName = customerRS.getString("Lastname");
                    if (lastName.isEmpty() == false) {
                        currentName = currentName + " " + lastName;
                    }
                } catch (NullPointerException e) {
                }
                nameField.setText(currentName);
                addressField.setText(customerRS.getString("address"));
                postCodeField.setText(customerRS.getString("postcode"));
                dearField.setText("Dear " + currentName);
            }
            if (checkRS.next() == false) {
                newInvoice = true;
            } else {
                invoiceId.setText(checkRS.getString(1));
            }
            
//If the discount is there, retrieve the value            
            if (discountRS.next() != false) {
                fixedDiscount = discountRS.getInt("fixed");
                motDiscount = discountRS.getInt("MoT");
                repairDiscount = discountRS.getInt("Repair");
                annualDiscount = discountRS.getInt("Annual");
                flexibleDiscountFirst = discountRS.getString("First");
                flexibleDiscountSecond = discountRS.getString("Second");
                flexibleDiscountThird = discountRS.getString("Third");
            }

//Getting total cost through labour cost and spare parts            
            BigDecimal totalCost = BigDecimal.valueOf(0);
            totalCost = totalCost.setScale(2, RoundingMode.HALF_UP);
            int row = 0;
            DefaultTableModel model = (DefaultTableModel) invoiceTable.getModel();
            int maxRows = model.getRowCount() - 1;
            String jobType = "Parts Sold";
            setPrice = rs.getString("setPrice");
            while (rs.next()) {
                if (row > maxRows) { //Adds new rows to the table in case there is too much data.
                    model.addRow(new Object[]{});
                    maxRows++;
                }
                BigDecimal partCost = rs.getBigDecimal("price");
                partCost = partCost.multiply(BigDecimal.valueOf(1.3));
                int partQuantity = rs.getInt("quantity");
                BigDecimal totalPartCost = partCost.multiply(BigDecimal.valueOf(partQuantity));
                totalPartCost = totalPartCost.setScale(2, RoundingMode.HALF_UP);
                if (setPrice == null || setPrice.isEmpty() == true) {
                    totalCost = totalCost.add(totalPartCost);
                }
                
//Printing the calculation on to the GUI                
                invoiceTable.setValueAt(rs.getString("partName"), row, 0);
                invoiceTable.setValueAt(rs.getString("partNo"), row, 1);
                if (setPrice == null || setPrice.isEmpty() == true) {
                    invoiceTable.setValueAt(partCost, row, 2);
                    invoiceTable.setValueAt(totalPartCost, row, 4);
                }

                invoiceTable.setValueAt(partQuantity, row, 3);
                row++;
            }
            
//Calcluating the fixed discount depending on job type (MoT, Repair, Annual)          
            if (fixedDiscount > 0) {
                float discount = Float.valueOf(fixedDiscount);
                discount = (100 - discount) / 100;
                totalCost = totalCost.multiply(BigDecimal.valueOf(discount));
            } else if (motDiscount > 0 || repairDiscount > 0 || annualDiscount > 0) {
                if (jobType.equals("MoT")) {
                    float discount = Float.valueOf(motDiscount);
                    discount = (100 - discount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(discount));
                } else if (jobType.equals("Repair")) {
                    float discount = Float.valueOf(repairDiscount);
                    discount = (100 - discount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(discount));
                } else if (jobType.equals("Annual")) {
                    float discount = Float.valueOf(annualDiscount);
                    discount = (100 - discount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(discount));
                }
            }
            
//Calcluating the flexible discount depending on the different conditions            
            else if (flexibleDiscountFirst.isEmpty() == false || flexibleDiscountSecond.isEmpty() == false || flexibleDiscountThird.isEmpty() == false) {
                String[] firstConditionSet = flexibleDiscountFirst.split("-");
                String[] secondConditionSet = flexibleDiscountSecond.split("-");
                String[] thirdConditionSet = flexibleDiscountThird.split("-");
                float firstCondition = Float.parseFloat(firstConditionSet[0]);
                float secondCondition = Float.parseFloat(secondConditionSet[0]);
                float thirdCondition = Float.parseFloat(thirdConditionSet[0]);
                float firstDiscount = Float.parseFloat(firstConditionSet[1]);
                float secondDiscount = Float.parseFloat(secondConditionSet[1]);
                float thirdDiscount = Float.parseFloat(thirdConditionSet[1]);
                if (totalCost.compareTo(BigDecimal.valueOf(thirdCondition)) > 0) {
                    thirdDiscount = (100 - thirdDiscount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(thirdDiscount));
                } else if (totalCost.compareTo(BigDecimal.valueOf(secondCondition)) > 0) {
                    secondDiscount = (100 - secondDiscount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(secondDiscount));
                } else if (totalCost.compareTo(BigDecimal.valueOf(firstCondition)) > 0) {
                    firstDiscount = (100 - firstDiscount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(firstDiscount));
                }
            }
//Rounding prices to 2 decimals            
            totalCost = totalCost.setScale(2, RoundingMode.HALF_UP);
            totalField.setText(totalCost.toString());
            BigDecimal vat = BigDecimal.valueOf(0);
            vatField.setText("0");
 
//Add VAT to jobs without a set price            
            if (setPrice == null || setPrice.isEmpty() == true) {
                vat = totalCost.multiply(BigDecimal.valueOf(0.2));
                vat = vat.setScale(2, RoundingMode.HALF_UP);
                vatField.setText(vat.toString());
            }
            grandTotal = totalCost.add(vat);
            grandTotalField.setText(grandTotal.toString());

//Record the invoice information on the database
            if (newInvoice == true) {
                String insertSQL = "INSERT INTO Invoice(customerId,amount,date,paid,VehicleregNo,jobNo) VALUES (?,?,?,?,?,?)";
                String maxIdSQL = "SELECT MAX(invoiceId) FROM Invoice";
                try {
                    PreparedStatement insertStatement = connection.prepareStatement(insertSQL);
                    Statement maxIdStatement = connection.createStatement();
                    insertStatement.setInt(1, customerId);
                    insertStatement.setBigDecimal(2, grandTotal);
                    insertStatement.setString(3, localDate.toString());
                    insertStatement.setBoolean(4, false);
                    insertStatement.setString(5, null);
                    insertStatement.setInt(6, Integer.parseInt(targetJobNo));
                    insertStatement.executeUpdate();

                    ResultSet maxIdRS = maxIdStatement.executeQuery(maxIdSQL);
                    while (maxIdRS.next()) {
                        invoiceId.setText(maxIdRS.getString(1));
                    }
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return grandTotal;
    }

//Populate the table with values    

    /**
     *
     * @param connection
     * @param targetRegNo
     * @return
     */
    public BigDecimal generateInvoiceTable(Connection connection, String targetRegNo) {
        BigDecimal grandTotal = BigDecimal.valueOf(0);
        LocalDate localDate = LocalDate.now();
        date.setText(localDate.toString());
        regNo.setText(targetRegNo);
        int fixedDiscount = 0;
        int motDiscount = 0;
        int repairDiscount = 0;
        int annualDiscount = 0;
        boolean newInvoice = false;
        String flexibleDiscountFirst = "";
        String flexibleDiscountSecond = "";
        String flexibleDiscountThird = "";
        String jobType = "";
        String setPrice = "";
        String invoiceSQL = "SELECT v.customerId, v.make,v.model, j.jobNo, j.workDone, j.mechanicId, j.setPrice, j.actualTime, j.jobType, m.labourRate, pu.partNo, pu.quantity, sl.partName, sl.price, st.firstName,st.lastName "
                + "FROM Vehicle AS v "
                + "INNER JOIN Job AS j ON v.regNo = j.VehicleregNo "
                + "INNER JOIN PartsUsed AS pu ON j.jobNo = pu.jobNo "
                + "INNER JOIN StockLedger AS sl ON sl.partNo = pu.partNo "
                + "INNER JOIN Mechanic AS m ON j.mechanicId = m.staffID "
                + "INNER JOIN Staff AS st ON st.staffID = j.mechanicId "
                + "WHERE v.regNo = '" + targetRegNo + "' ";

        String discountSQL = "SELECT d.* "
                + "FROM Discount AS d "
                + "INNER JOIN Vehicle AS v ON d.customerId = v.customerId "
                + "WHERE v.regNo = '" + targetRegNo + "' ";

        String checkSQL = "SELECT invoiceId FROM Invoice WHERE VehicleregNo = '" + targetRegNo + "'";
        try {
            Statement statement = connection.createStatement();
            Statement discountStatement = connection.createStatement();
            Statement checkStatement = connection.createStatement(); //Checks if invoice for vehicle already exists
            ResultSet rs = statement.executeQuery(invoiceSQL);
            ResultSet discountRS = discountStatement.executeQuery(discountSQL);
            ResultSet checkRS = checkStatement.executeQuery(checkSQL);
            if (checkRS.next() == false) {
                newInvoice = true;
            } else {
                invoiceId.setText(checkRS.getString(1));
            }
            if (discountRS.next() != false) {
                fixedDiscount = discountRS.getInt("fixed");
                motDiscount = discountRS.getInt("MoT");
                repairDiscount = discountRS.getInt("Repair");
                annualDiscount = discountRS.getInt("Annual");
                flexibleDiscountFirst = discountRS.getString("First");
                flexibleDiscountSecond = discountRS.getString("Second");
                flexibleDiscountThird = discountRS.getString("Third");
            }
            BigDecimal totalCost = BigDecimal.valueOf(0);
            totalCost = totalCost.setScale(2, RoundingMode.HALF_UP);
            int row = 0;
            DefaultTableModel model = (DefaultTableModel) invoiceTable.getModel();
            int maxRows = model.getRowCount() - 1;
            int customerId = rs.getInt("customerId");
            jobType = rs.getString("jobType");
            int jobNo = rs.getInt("jobNo");
            setPrice = rs.getString("setPrice");
            modelField.setText(rs.getString("model"));
            makeField.setText(rs.getString("make"));
            workDoneField.setText(rs.getString("workDone"));
            BigDecimal labourCost = rs.getBigDecimal("labourRate");
            labourCost = labourCost.setScale(2, RoundingMode.HALF_UP);
            int hoursTaken = rs.getInt("actualTime");
            if (setPrice == null || setPrice.isEmpty() == true) {
                BigDecimal labourTotalCost = labourCost.multiply(BigDecimal.valueOf(hoursTaken));
                labourTotalCost = labourTotalCost.setScale(2, RoundingMode.HALF_UP);
                totalCost = totalCost.add(labourTotalCost);
                labourPrice.setText(labourCost.toString());
                jobDuration.setText(String.valueOf(hoursTaken));
                labourTotal.setText(labourTotalCost.toString());
            } else {
                float setPriceFloat = Float.parseFloat(setPrice);
                totalCost = BigDecimal.valueOf(setPriceFloat);
            }

            while (rs.next()) {
                if (row > maxRows) { //Adds new rows to the table in case there is too much data.
                    model.addRow(new Object[]{});
                    maxRows++;
                }
                BigDecimal partCost = rs.getBigDecimal("price");
                partCost = partCost.multiply(BigDecimal.valueOf(1.3));
                int partQuantity = rs.getInt("quantity");
                BigDecimal totalPartCost = partCost.multiply(BigDecimal.valueOf(partQuantity));
                totalPartCost = totalPartCost.setScale(2, RoundingMode.HALF_UP);
                if (setPrice == null || setPrice.isEmpty() == true) {
                    totalCost = totalCost.add(totalPartCost);
                }
                invoiceTable.setValueAt(rs.getString("partName"), row, 0);
                invoiceTable.setValueAt(rs.getString("partNo"), row, 1);
                if (setPrice == null || setPrice.isEmpty() == true) {
                    invoiceTable.setValueAt(partCost, row, 2);
                    invoiceTable.setValueAt(totalPartCost, row, 4);
                }

                invoiceTable.setValueAt(partQuantity, row, 3);
                row++;

            }
            if (fixedDiscount > 0) {
                float discount = Float.valueOf(fixedDiscount);
                discount = (100 - discount) / 100;
                totalCost = totalCost.multiply(BigDecimal.valueOf(discount));
            } else if (motDiscount > 0 || repairDiscount > 0 || annualDiscount > 0) {
                if (jobType.equals("MoT")) {
                    float discount = Float.valueOf(motDiscount);
                    discount = (100 - discount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(discount));
                } else if (jobType.equals("Repair")) {
                    float discount = Float.valueOf(repairDiscount);
                    discount = (100 - discount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(discount));
                } else if (jobType.equals("Annual")) {
                    float discount = Float.valueOf(annualDiscount);
                    discount = (100 - discount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(discount));
                }
            } else if (flexibleDiscountFirst.isEmpty() == false || flexibleDiscountSecond.isEmpty() == false || flexibleDiscountThird.isEmpty() == false) {
                String[] firstConditionSet = flexibleDiscountFirst.split("-");
                String[] secondConditionSet = flexibleDiscountSecond.split("-");
                String[] thirdConditionSet = flexibleDiscountThird.split("-");
                float firstCondition = Float.parseFloat(firstConditionSet[0]);
                float secondCondition = Float.parseFloat(secondConditionSet[0]);
                float thirdCondition = Float.parseFloat(thirdConditionSet[0]);
                float firstDiscount = Float.parseFloat(firstConditionSet[1]);
                float secondDiscount = Float.parseFloat(secondConditionSet[1]);
                float thirdDiscount = Float.parseFloat(thirdConditionSet[1]);
                if (totalCost.compareTo(BigDecimal.valueOf(thirdCondition)) > 0) {
                    thirdDiscount = (100 - thirdDiscount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(thirdDiscount));
                } else if (totalCost.compareTo(BigDecimal.valueOf(secondCondition)) > 0) {
                    secondDiscount = (100 - secondDiscount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(secondDiscount));
                } else if (totalCost.compareTo(BigDecimal.valueOf(firstCondition)) > 0) {
                    firstDiscount = (100 - firstDiscount) / 100;
                    totalCost = totalCost.multiply(BigDecimal.valueOf(firstDiscount));
                }
            }
            totalCost = totalCost.setScale(2, RoundingMode.HALF_UP);
            totalField.setText(totalCost.toString());
            BigDecimal vat = BigDecimal.valueOf(0);
            vatField.setText("0");
            if (setPrice == null || setPrice.isEmpty() == true) {
                vat = totalCost.multiply(BigDecimal.valueOf(0.2));
                vat = vat.setScale(2, RoundingMode.HALF_UP);
                vatField.setText(vat.toString());
            }
            grandTotal = totalCost.add(vat);
            grandTotalField.setText(grandTotal.toString());

            if (newInvoice == true) {
                String insertSQL = "INSERT INTO Invoice(customerId,amount,date,paid,VehicleregNo,jobNo) VALUES (?,?,?,?,?,?)";
                String maxIdSQL = "SELECT MAX(invoiceId) FROM Invoice";
                try {
                    PreparedStatement insertStatement = connection.prepareStatement(insertSQL);
                    Statement maxIdStatement = connection.createStatement();
                    insertStatement.setInt(1, customerId);
                    insertStatement.setBigDecimal(2, grandTotal);
                    insertStatement.setString(3, localDate.toString());
                    insertStatement.setBoolean(4, false);
                    insertStatement.setString(5, targetRegNo);
                    insertStatement.setInt(6, jobNo);
                    insertStatement.executeUpdate();

                    ResultSet maxIdRS = maxIdStatement.executeQuery(maxIdSQL);
                    while (maxIdRS.next()) {
                        invoiceId.setText(maxIdRS.getString(1));
                    }
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return grandTotal;
    }

    /**
     *
     * @throws BadElementException
     * @throws IOException
     */
    public static void printInvoice() throws BadElementException, IOException {
        try {
            PdfWriter writer = PdfWriter.getInstance(invoiceDoc, new FileOutputStream("Invoice.pdf"));
            invoiceDoc.open();

            Image invoiceI = Image.getInstance("Invoice.jpg");

            invoiceDoc.add(invoiceI);

            invoiceDoc.close();
            writer.close();
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    /**
     *
     * @return
     */
    public LocalDate getDate() {
        return presentDate;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressField;
    private javax.swing.JLabel date;
    private javax.swing.JLabel dearField;
    private javax.swing.JLabel decriptionNonField;
    private javax.swing.JLabel garitsText;
    private javax.swing.JLabel grandTotalField;
    private javax.swing.JLabel invoiceId;
    private javax.swing.JLabel invoiceNoNonField;
    private javax.swing.JTable invoiceTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jobDuration;
    private javax.swing.JLabel labourField;
    private javax.swing.JLabel labourPrice;
    private javax.swing.JLabel labourTotal;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel makeField;
    private javax.swing.JLabel makeNonField;
    private javax.swing.JLabel modelField;
    private javax.swing.JLabel modelNonField;
    private javax.swing.JLabel nameField;
    private javax.swing.JLabel postCodeField;
    private javax.swing.JLabel regNo;
    private javax.swing.JLabel totalField;
    private javax.swing.JLabel vatField;
    private javax.swing.JLabel vehicleRegNonField;
    private javax.swing.JLabel workDoneField;
    // End of variables declaration//GEN-END:variables
}
